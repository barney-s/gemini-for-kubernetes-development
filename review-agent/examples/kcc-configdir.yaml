apiVersion: configdir.gke.io/v1alpha1
kind: ConfigDir
metadata:
  name: kcc-gemini
  namespace: review-agent-system
spec:
  files:
  - path: commands/google-internal/GO-Review.json
    source:
      inline: |
        {
          "hints": {
            "go-review": {
              "title": "Go Code Review Guidelines",
              "description": "A set of guidelines for reviewing Go code, emphasizing clarity, maintainability, and correctness, based on Effective Go, YAGNI, KISS, and the Single Responsibility Principle.",
              "categories": [
                {
                  "name": "Clarity",
                  "points": [
                    {
                      "id": "GO-CLARITY-001",
                      "text": "Naming Conventions: Variable and function names should be clear, concise, and descriptive. Follow Go's conventions for idiomatic naming (e.g., short variable names for local scope, camelCase for exported identifiers)."
                    },
                    {
                      "id": "GO-CLARITY-002",
                      "text": "Comments: Write comments to explain the 'why', not the 'what'. Code should be self-documenting where possible, but complex logic, business rules, or non-obvious behavior should be explained."
                    },
                    {
                      "id": "GO-CLARITY-003",
                      "text": "Simplicity (KISS): Prioritize simplicity. Avoid clever or obscure code. A straightforward implementation is easier to understand and maintain."
                    },
                    {
                      "id": "GO-CLARITY-004",
                      "text": "Readability: Code should be easy to read. Use `gofmt` to ensure consistent formatting."
                    }
                  ]
                },
                {
                  "name": "Maintainability",
                  "points": [
                    {
                      "id": "GO-MAINTAIN-001",
                      "text": "YAGNI (You Aren't Gonna Need It): Do not add functionality that is not currently required. Avoid premature optimization and over-engineering."
                    },
                    {
                      "id": "GO-MAINTAIN-002",
                      "text": "Modularity: Break down large functions and packages into smaller, more manageable pieces. Each piece should have a clear and single purpose."
                    },
                    {
                      "id": "GO-MAINTAIN-003",
                      "text": "Dependencies: Minimize dependencies between packages. Use interfaces to decouple components and make the code more flexible."
                    },
                    {
                      "id": "GO-MAINTAIN-004",
                      "text": "Testability: Write code that is easy to test. Use dependency injection and interfaces to isolate components for unit testing."
                    }
                  ]
                },
                {
                  "name": "Clear Code Organization",
                  "points": [
                    {
                      "id": "GO-ORG-001",
                      "text": "Single Responsibility Principle: Each function, type, and package should have a single, well-defined responsibility. This makes the code easier to understand, test, and modify."
                    },
                    {
                      "id": "GO-ORG-002",
                      "text": "Package Structure: Organize code into logical packages. A good package structure makes the codebase easier to navigate and understand."
                    },
                    {
                      "id": "GO-ORG-003",
                      "text": "File Organization: Keep related types and functions together in the same file. A file should have a clear purpose."
                    }
                  ]
                },
                {
                  "name": "Correctness",
                  "points": [
                    {
                      "id": "GO-CORRECT-001",
                      "text": "Error Handling: Handle errors explicitly and immediately. Don't ignore them. Use `if err != nil` checks and return errors to the caller."
                    },
                    {
                      "id": "GO-CORRECT-002",
                      "text": "Concurrency: When using goroutines and channels, ensure that there are no race conditions. Use `go vet` and the race detector to identify potential issues."
                    },
                    {
                      "id": "GO-CORRECT-003",
                      "text": "Resource Management: Ensure that resources like files and network connections are properly closed, even in the presence of errors. Use `defer` for cleanup."
                    },
                    {
                      "id": "GO-CORRECT-004",
                      "text": "Edge Cases: Consider edge cases and boundary conditions. Write tests to cover these scenarios."
                    }
                  ]
                },
                {
                  "name": "Security",
                  "points": [
                    {
                      "id": "GO-SEC-001",
                      "text": "Input Validation: Always validate and sanitize input from external sources to prevent vulnerabilities like SQL injection and cross-site scripting (XSS)."
                    },
                    {
                      "id": "GO-SEC-002",
                      "text": "Secrets Management: Do not hardcode secrets (API keys, passwords) in the code. Use a secure method for managing secrets, such as environment variables or a secrets management service."
                    },
                    {
                      "id": "GO-SEC-003",
                      "text": "Least Privilege: Follow the principle of least privilege. A piece of code should only have the permissions it needs to do its job."
                    },
                    {
                      "id": "GO-SEC-004",
                      "text": "Dependencies: Be mindful of third-party dependencies. Use tools to scan for vulnerabilities in your dependencies."
                    }
                  ]
                }
              ]
            }
          }
        }
  - path: commands/google-internal/KCC-Review.json
    source:
      inline: |
        {
          "project_name": "k8s-config-connector",
          "guidelines": {
            "clarity": [
              {
                "title": "Prefer Explicit over Implicit",
                "description": "Avoid 'magic' or overly complex solutions that rely on reflection or other implicit mechanisms. Favor explicit and straightforward code that is easy to follow and understand.",
                "example": "Instead of using reflection to find and validate fields in a generic way, consider code generation or more direct validation logic for each resource type."
              },
              {
                "title": "Clear and Consistent Naming",
                "description": "Use clear and consistent naming conventions. For example, prefer user-friendly and predictable identifiers like `projectId` over server-generated, opaque ones like `projectNumber`, especially in user-facing APIs and test data.",
                "example": "In test files and resource definitions, use `${projectId}` instead of `${projectNumber}`."
              },
              {
                "title": "Write Clear Comments",
                "description": "Ensure that comments are clear, concise, and not contradictory. Comments should explain the 'why' behind the code, not just the 'what'.",
                "example": "If a comment explains the purpose of a function, make sure it accurately reflects the function's behavior."
              }
            ],
            "maintainability": [
              {
                "title": "Small, Focused Pull Requests",
                "description": "Keep pull requests small and focused on a single logical change. This makes them easier to review, understand, and merge.",
                "example": "If you are making multiple independent changes, submit them as separate PRs."
              },
              {
                "title": "Automate Code Formatting",
                "description": "Use tools like `goimports` to automatically format code and manage imports. This ensures consistency and reduces the cognitive load on reviewers.",
                "example": "Integrate `goimports` into the code generation process to ensure all generated code is properly formatted."
              },
              {
                "title": "Reduce Boilerplate",
                "description": "Strive to reduce boilerplate code. If you find yourself repeating the same code in multiple places, consider creating a shared function or using a more abstract approach.",
                "example": "If multiple code generation scripts have the same setup and teardown logic, extract that logic into a shared library."
              },
              {
                "title": "Use Shared Functions",
                "description": "To avoid code duplication, use shared functions for common logic. This improves maintainability and reduces the chance of bugs.",
                "example": "If the `Create` and `Update` functions for a resource share a lot of code, extract the common logic into a separate function."
              }
            ],
            "code_organization": [
              {
                "title": "Clean API Design",
                "description": "Pay attention to the design of your APIs. They should be clean, intuitive, and easy to use.",
                "example": "When adding a new version of a resource, ensure the new version is well-structured and follows the existing conventions."
              }
            ],
            "correctness": [
              {
                "title": "Attention to Detail",
                "description": "Pay close attention to the details of your implementation. Small mistakes can have a big impact.",
                "example": "Use the most precise function for the job, for example, `strings.HasSuffix` instead of `strings.Contains` when checking for a suffix."
              },
              {
                "title": "Thorough Testing",
                "description": "Ensure that your changes are well-tested. For beta and v1 resources, all fields should be covered by tests.",
                "example": "When adding a new field to a resource, add a test case that covers that field."
              }
            ],
            "security": [],
            "performance": []
          }
        }
  - path: commands/google-internal/review-pr.toml
    source:
      inline: |
        # In: ~/.gemini/commands/google-internal/review-pr.toml
        # Invoked via: /google-internal:review-pr "4860"
        # Gemini custom command docs can be found at https://github.com/google-gemini/gemini-cli/blob/main/docs/cli/commands.md#toml-file-format-v1

        description = "Generate an initial code review of for a Pull Request."
        prompt = """
        Please analyze the git pull request {{args}} in GoogleCloudPlatform/k8s-config-connector.
        Write a file 'review-output.txt'. This file should contain a review of pull request {{args}}.
        Please also look at any checks or comments for that pull request.

        ## AI Pull Request Review Assistant

        This section defines your role when I ask you to review a Pull Request.
        You are in a git worktree, there will not be a '.git' directory. The git repo you are in a worktree of is https://github.com/GoogleCloudPlatform/k8s-config-connector. You do not have the gh tool and cannot install it. Instead use the 'github MCP serverr'.

        ### 1. Persona and Goal

        You are an expert AI assistant specializing in reviewing code, the Config Connector (kcc or cnrm) code base and providing feedback on pull requests. Your primary goal is to provide actionable feedback for the Pull Request author. You provide feedback by writing a file 'review-{{args}}.txt' which can be passed to 'gh pr review -c -F review-{{args}}.txt -R GoogleCloudPlatform/k8s-config-connector {{args}}'.

        **DO NOT** recommend whether to merge the PR.
        **DO NOT** attempt to post any comments to the PR.
        **DO NOT** post a review to the PR.
        **DO** use the github MCP server to read from github.

        ### 2. Information Gathering

        You must analyze the PR description, comments from all contributors, and the code changes (`diff`).
        Cross-reference the changes with surrounding code in the repository to validate assumptions about system behavior.

        Please call the guthub MCP server to get the details of the pull request.
        Please print the title of the PR after you call it.

        Read @.gemini/commands/google-internal/KCC-Review.json for information about code reviews on KCC.
        Read @.gemini/commands/google-internal/GO-Review.json for information about code reviews on golang code.

        ### 3. Analysis & Review Generation

        Please generate a file 'review-{{args}}.txt' which can be passed to 'gh pr review -c -F review-{{args}}.txt -R GoogleCloudPlatform/k8s-config-connector {{args}}'.
        The file should contain the following.
        - Positive feedback on any good features of the change.
        - Actionable feedback on any code which should be changed. Any such feedback should not have already been dealt with in the latest version of the code.
        - All feedback should be done with a professional tone.
        - You should flag if release notes are needed in the pull request description.
        - You should flag if a desired milestone is missing in the pull request description.

        #### Implementation Analysis
        - Are there any potential bugs, logic errors, or race conditions in the implementation?
        - Does the code adhere to established k8s coding conventions and best practices?

        #### Backward Compatibility
        - **Crucially, analyze backward compatibility implications.**
        - For changes in the `apis/` directory (e.g., to exported Go types), confirm they are **backward
          compatible**.
        - For changes in the `pkg/` directory, breaking changes are permissible only if **all internal call
          sites** within the kcc project have been updated accordingly. Please verify this.
        - For changes in the `experiments/` direct breaking changes are permissable.

        #### Testing Gaps
        - How thorough is the test coverage for the new changes?
        - Are there missing unit, integration, or e2e tests for critical code paths or edge cases?


        ### 4. Summary of review

        - Briefly explain the **purpose** and **nature** of the requested code changes.
        - Generate the file review-{{args}}.txt with the code review in it.
        - Please give a confidence level on the correctness and completeness of the code review.
        - Please print the command needed to send the code review 'gh pr review -c -F review-{{args}}.txt -R GoogleCloudPlatform/k8s-config-connector {{args}}'.
        """
  - path: settings.json
    source:
      inline: |
        {
            "mcpServers": {
                "github": {
                    "command": "/github-mcp-server",
                    "args": [
                        "stdio"
                    ],
                    "env": {
        		"GITHUB_READ-ONLY": 1
                    }
                }
            }
        }
