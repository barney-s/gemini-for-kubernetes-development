#!/usr/bin/env python3
# Copyright 2025 The Kubernetes Authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


import os
import subprocess
import sys
import argparse
import glob

script_dir = os.path.dirname(os.path.realpath(__file__))
sys.path.append(script_dir)

from shared import golang


def main():
    parser = argparse.ArgumentParser(
        description="Update a go dependency in all go.mod/tools.mod files."
    )
    parser.add_argument("dependency", help="The go dependency to update, e.g. 'k8s.io/client-go@v0.29.0'")
    args = parser.parse_args()

    repo_root = golang.find_repo_root()
    mod_files = golang.find_go_mod_files(mod_name_patterns=['go.mod', 'tools.mod'])

    if not mod_files:
        print("No go.mod or tools.mod files found.")
        return

    print(f"Found mod files:")
    for f in mod_files:
        rel_path = os.path.relpath(f, repo_root)
        print(f"  {rel_path}")

    for mod_file in mod_files:
        mod_dir = os.path.dirname(mod_file)
        mod_filename = os.path.basename(mod_file)
        rel_path = os.path.relpath(mod_dir, repo_root)
        display_path = rel_path if rel_path != '.' else '(root)'

        go_get_command = ["go", "get"]
        if mod_filename == "tools.mod":
            go_get_command.append("-modfile=tools.mod")
        go_get_command.append(args.dependency)

        print(f"Running '{' '.join(go_get_command)}' in '{display_path}'...")
        try:
            subprocess.run(
                go_get_command,
                cwd=mod_dir,
                check=True,
                capture_output=True,
                text=True,
            )
        except subprocess.CalledProcessError as e:
            print(f"Error updating dependency in {display_path} ({mod_filename}):")
            print(e.stderr)
            sys.exit(1)

    for mod_file in mod_files:
        mod_dir = os.path.dirname(mod_file)
        mod_filename = os.path.basename(mod_file)
        rel_path = os.path.relpath(mod_dir, repo_root)
        display_path = rel_path if rel_path != '.' else '(root)'

        go_tidy_command = ["go", "mod", "tidy"]
        if mod_filename == "tools.mod":
            go_tidy_command.append("-modfile=tools.mod")

        print(f"Running '{' '.join(go_tidy_command)}' in '{display_path}'...")
        try:
            subprocess.run(
                go_tidy_command,
                cwd=mod_dir,
                check=True,
                capture_output=True,
                text=True,
            )
        except subprocess.CalledProcessError as e:
            print(f"Error running 'go mod tidy' in {display_path} ({mod_filename}):")
            print(e.stderr)
            sys.exit(1)

    print("\nDependency update complete.")


if __name__ == "__main__":
    main()